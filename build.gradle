/*
 * CosmicDan's Mods build script
 * Additional credits to SlimeKnights, aidancbrady and Choonster
 * TODO: Adapt the script to be more universal (i.e. working with contributors via only build.properties changes - not just CosmicDan's main dev machine)
 */

buildscript {
	repositories {
		jcenter()
		maven { url = "http://files.minecraftforge.net/maven" }
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

// Commented-out as it's already grabbed from CosmicLib 
//plugins {
//	id 'io.franzbecker.gradle-lombok' version '1.10'
//}

apply plugin: 'net.minecraftforge.gradle.forge'

project.logger.lifecycle("")
project.logger.lifecycle("---------------------------------")
project.logger.lifecycle("[#] CosmicDan's Mods Build Script")
project.logger.lifecycle("---------------------------------")
project.logger.lifecycle("")



/////////////////////////////////////////
// Assign properties and build config
/////////////////////////////////////////

def propGetter(inputProp) {
	def inputPropFile = file inputProp
	inputPropFile.withReader {
		def prop = new Properties()
		prop.load(it)
		def outputProp = new ConfigSlurper().parse prop
		return outputProp
	}
}

ext.buildProps = propGetter("build.properties")
ext.versionProps = propGetter("version.properties")
ext.cosmiclibVersionProps = propGetter("../CosmicLib/version.properties")

group = buildProps.group_prefix + '.' + buildProps.modid
ext.groupAsPath = group.replace(".", "/")
ext.coreModPluginClass = (group + '.' + buildProps.coremod_package_suffix + '.' + buildProps.coremod_class)
ext.coreModPluginPath = 'src/main/java/' + coreModPluginClass.replace(".", "/") + '.java'
ext.coreModFound = false
try {
	if (file(coreModPluginPath).exists()) { ext.coreModFound = true }
} catch(Exception e) {}
ext.accessTransformerName = buildProps.modid + "_at.cfg"
ext.accessTransformerPath = "src/main/resources/META-INF/${accessTransformerName}"
ext.accessTransformerFound = false
if (file(accessTransformerPath).exists()) { ext.accessTransformerFound = true }
ext.coreModCompanionExists = false
if (file("src_cmc/").exists()) { ext.coreModCompanionExists = true }



/////////////////////////////////////////
// Store keystore password (do it early so build can fail early)
/////////////////////////////////////////

ext.keystorePassword = ""
try {
	ext.keystorePassword = new File(buildProps.keyStorePasswordFile).text
} catch(Exception e) {
	def errorMsg = "[!] Could not access file: " + buildProps.keyStorePasswordFile
	logger.error(errorMsg)
	throw e
}



/////////////////////////////////////////
// Print detected mod info
/////////////////////////////////////////

project.logger.lifecycle("[i] modId: " + buildProps.modid)
project.logger.lifecycle("[i] group: " + group)
project.logger.lifecycle("[i] coreModFound: " + coreModFound)
if (coreModFound) {
	project.logger.lifecycle("	[~] coreModPluginClass: " + coreModPluginClass)
	project.logger.lifecycle("	[~] coreModPluginPath: " + coreModPluginPath)
}
project.logger.lifecycle("[i] accessTransformerFound: " + accessTransformerFound)
if (accessTransformerFound) {
	project.logger.lifecycle("	[~] accessTransformerName: " + accessTransformerName)
	project.logger.lifecycle("	[~] accessTransformerPath: " + accessTransformerPath)
}
project.logger.lifecycle("[i] coreModCompanionExists: " + coreModCompanionExists)
project.logger.lifecycle("[i] Keystore location: " + buildProps.keyStore)
project.logger.lifecycle("[i] Keystore alias: " + buildProps.keyStoreAlias)
project.logger.lifecycle("[i] Keystore password file: " + buildProps.keyStorePasswordFile)
project.logger.lifecycle("")


/////////////////////////////////////////
// Build version data/strings
/////////////////////////////////////////

task buildInfo {
	def cmd = "git rev-parse --short HEAD"
	def proc = cmd.execute()
	proc.waitFor()
	if (proc.exitValue() == 0) {
		ext.revision = proc.text.trim()
	} else {
		ext.revision = "GITBORK"
	}
	ext.buildNum = "testbuild.${project.buildInfo.revision}"
}

ext.jarVersion = 'NFG'
ext.cosmicmod_releasemode = System.getenv("COSMICMOD_RELEASEMODE")
ext.baseVersion = "${versionProps.major}.${versionProps.minor}.${versionProps.revision}"
if ("${cosmicmod_releasemode}" != "null") {
	if ("${cosmicmod_releasemode}" != "RELEASE") {
		// append the ALPHA/BETA/DEV tag if it's not RELEASE mode
		jarVersion = "${baseVersion}.${cosmicmod_releasemode}"
	} else {
		// Release mode
		jarVersion = "${baseVersion}"
	}
} else {
	jarVersion = "${baseVersion}.${project.buildInfo.buildNum}"
}
version = "${buildProps.minecraft_version}-${jarVersion}"



/////////////////////////////////////////
// Common ForegeGradle stuff
/////////////////////////////////////////

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}
 
minecraft {
	version = "${buildProps.forge_version}"
	runDir = "run"
	mappings = "${buildProps.mcp_mappings}"
	makeObfSourceJar = false
	
	replace "@jar_fingerprint@", "${buildProps.signature_sha1}"
	replace "@version@", "${baseVersion}"
	replace "required-after:cosmiclib", "required-after:cosmiclib@[${cosmiclibVersionProps.major}.${cosmiclibVersionProps.minor}.${cosmiclibVersionProps.revision},)"
	
	project.logger.lifecycle("")
	project.logger.lifecycle("[i] Parsing IDE config...")
	if (coreModFound) {
		project.logger.lifecycle("	[~] CoreModCompanion detected; plugin found for IDE's JVM args:")
		project.logger.lifecycle("	    ${coreModPluginClass}")
		clientJvmArgs += "-Dfml.coreMods.load=${coreModPluginClass}"
		serverJvmArgs += "-Dfml.coreMods.load=${coreModPluginClass}"
	} else {
		project.logger.lifecycle("	[~] No CoreModCompanion found")
	}
	
	if (buildProps.username != "null") {
		project.logger.lifecycle("	[~] Username found for IDE's run args:")
		project.logger.lifecycle("	    ${buildProps.username}")
		clientRunArgs += "--username ${buildProps.username}"
	} else {
		project.logger.lifecycle("	[~] No username set. Will be random!")
	}
	project.logger.lifecycle("")
}

dependencies {
	compile project(':CosmicLib')
	compileOnly "org.projectlombok:lombok:1.16.18"
	testCompile "junit:junit:4.12"
}



/////////////////////////////////////////
// Build task definitions
/////////////////////////////////////////

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", baseVersion
	inputs.property "mcversion", project.minecraft.version
	
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
				
		// replace version and mcversion
		expand 'version':baseVersion, 'mcversion':project.minecraft.version
	}
		
	// copy everything else except the mcmod.info and coremod
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

// Main jar
jar {
	archiveName = "${project.name}___FULL-DO-NOT-DISTRIB___${project.version}.jar"
	finalizedBy reobfJar
}

// Deobfuscated (dev) jar
task deobfJar(type: Jar) {
	archiveName = "${project.name}-DEV-ONLY-${project.version}-full-deobf.jar"
	from sourceSets.main.output
	classifier = 'deobf'

	manifest {
		if (accessTransformerFound) {
			attributes 'FMLAT': accessTransformerName
		}
	}
}

// Sources jar
task sourceDeobfJar(type: Jar) {
	archiveName = "${project.name}-DEV-ONLY-${project.version}-full-src.jar"
	from sourceSets.main.resources.srcDirs
	from sourceSets.main.allJava
	classifier = 'sources'
}

// Sign jar task template
def signJars(jarToSign) {
	return tasks.create(name: "sign${jarToSign.classifier}Jar", type: SignJar, dependsOn: jarToSign) {
		keyStore = buildProps.keyStore
		alias = buildProps.keyStoreAlias
		storePass = keystorePassword
		keyPass = keystorePassword
		inputFile = jarToSign.archivePath
		outputFile = jarToSign.archivePath
	}
}

// Distrib or "release" (based on Main jar but with coremod, if any, stripped out)
task mainJar(type: Jar) {
	archiveName = "${project.name}-${project.version}.jar"
	classifier "main"
	dependsOn "extractAnnotationsJar"

	manifest {
		if (accessTransformerFound) {
			attributes 'FMLAT': accessTransformerName
		}
	}
	
	from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
		exclude groupAsPath + '/' + buildProps.coremod_package_suffix.replace(".", "/") + '/**'
	}
}

// CoreModCompanion jar
task cmcJar(type: Jar) {
	archiveName = "${project.name}-${project.version}-CoreModCompanion.jar"
	classifier "cmc"
	dependsOn "extractAnnotationsJar"
	
	manifest {
		attributes (
			'FMLCorePlugin': coreModPluginClass,
			'FMLCorePluginContainsFMLMod': 'true'
		)
	}
	
	from('src_cmc') {
		include '*'
		expand 'version':baseVersion, 'mcversion':project.minecraft.version
	}

	// Copy CoreMod and non-standard metadata (e.g. FML asm json)
	from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
		include groupAsPath + '/' + buildProps.coremod_package_suffix.replace(".", "/") + '/**'
		include 'META-INF/**'
		exclude 'META-INF/*.cfg'
		exclude 'META-INF/MANIFEST.MF'
	}
}

/////////////////////////////////////////
// Build task actions
/////////////////////////////////////////

artifacts {
	archives deobfJar
	archives sourceDeobfJar
	archives mainJar
	if (coreModFound) {
		if (coreModCompanionExists) {
			archives cmcJar
		} else {
			log.error("[!] A coremod plugin is found but the src_cmc folder does not. CoreModCompanion task NOT performed; coremod plugin kept bundled in main mod. This is bad!")
		}
	}
}

build {
	dependsOn signJars(mainJar)
	if (coreModFound && coreModCompanionExists) {
		dependsOn signJars(cmcJar)
	}
}

// Commented-out as it's already grabbed from CosmicLib 
//lombok {
//	version = "?.?.?"
//	sha256 = ""
//}
