/*
 * CosmicDan's gradle build files were originally based on Mantle/TiC (SlimeKnights) design
 * Big thanks to Sunstrike, ProgWML6, AbrarSyed
 */

buildscript {
	repositories {
		jcenter()
		maven { url = "http://files.minecraftforge.net/maven" }
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

// Commented-out as it's already grabbed from CosmicLib 
//plugins {
//	id 'io.franzbecker.gradle-lombok' version '1.10'
//}

apply plugin: 'net.minecraftforge.gradle.forge'

ext.buildPropsFile = file "build.properties"
buildPropsFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.buildProps = new ConfigSlurper().parse prop
}

ext.versionPropsFile = file "version.properties"
versionPropsFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.versionProps = new ConfigSlurper().parse prop
}

// Inject CosmicLib version requirement to the source
ext.cosmiclibVersionPropsFile = file "../CosmicLib/version.properties"
cosmiclibVersionPropsFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.cosmiclibVersionProps = new ConfigSlurper().parse prop
}

group = buildProps.group

// get current build number from Git log
task buildInfo {
	def cmd = "git rev-parse --short HEAD"
	def proc = cmd.execute()
	proc.waitFor()
	if (proc.exitValue() == 0) {
		ext.revision = proc.text.trim()
	} else {
		ext.revision = "GITBORK"
	}
	ext.buildNum = "testbuild.${project.buildInfo.revision}"
}

// build version string
ext.jarVersion = 'NFG'
ext.cosmicmod_releasemode = System.getenv("COSMICMOD_RELEASEMODE")
ext.baseVersion = "${versionProps.major}.${versionProps.minor}.${versionProps.revision}"
if ("${cosmicmod_releasemode}" != "null") {
	if ("${cosmicmod_releasemode}" != "RELEASE") {
		// append the ALPHA/BETA/DEV tag if it's not RELEASE mode
		jarVersion = "${baseVersion}.${cosmicmod_releasemode}"
	} else {
		// Release mode
		jarVersion = "${baseVersion}"
	}
} else {
	jarVersion = "${baseVersion}.${project.buildInfo.buildNum}"
}
version = "${buildProps.minecraft_version}-${jarVersion}"

task incrementBuildnumber(type:Copy){
	if ("${cosmicmod_releasemode}" != "null") {
		ant.propertyfile(file: versionPropsFile) {
			entry(key: 'revision', type: 'int', operation: '+', value: 001)
		}
	}
}
compileJava.dependsOn incrementBuildnumber

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
	version = "${buildProps.forge_version}"
	runDir = "run"
	replace "@jar_fingerprint@", "${buildProps.signature_sha1}"
	replace "@version@", "${baseVersion}"
	replace "required-after:cosmiclib", "required-after:cosmiclib@[${cosmiclibVersionProps.major}.${cosmiclibVersionProps.minor}.${cosmiclibVersionProps.revision},)"
	mappings = "${buildProps.mcp_mappings}"
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
	compile project(':CosmicLib')
	compileOnly "org.projectlombok:lombok:1.16.18"
	testCompile "junit:junit:4.12"
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", baseVersion
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
				
		// replace version and mcversion
		expand 'version':baseVersion, 'mcversion':project.minecraft.version
	}
		
	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

jar {
	manifest {
		// AT's here
	}
	finalizedBy reobfJar
}

// Create deobf dev jars
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
	manifest {
		// AT's here
	}
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

String keyStorePass = new File('X:/CosmicDan_keystore_Minecraft-Mods_password').text
task signJar(type: SignJar, dependsOn: reobfJar) {
	// Skips if the keyStore property is missing.
	onlyIf {
		keyStorePass != "null"
	}

	keyStore = buildProps.keyStore
	alias = buildProps.keyStoreAlias
	storePass = keyStorePass
	keyPass = keyStorePass
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

build.dependsOn signJar

artifacts {
	archives deobfJar
	archives sourcesJar
}

// Commented-out as it's already grabbed from CosmicLib 
//lombok {
//	version = "?.?.?"
//	sha256 = ""
//}
